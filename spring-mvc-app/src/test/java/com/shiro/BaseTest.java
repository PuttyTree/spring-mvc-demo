package com.shiro;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.config.IniSecurityManagerFactory;import org.apache.shiro.mgt.SecurityManager;import org.apache.shiro.subject.Subject;import org.apache.shiro.util.Factory;import org.apache.shiro.util.ThreadContext;import org.junit.After;import static org.junit.Assert.assertEquals;public abstract class BaseTest {	@After	public void tearDown() throws Exception {		ThreadContext.unbindSubject();//退出时请解除绑定Subject到线程 否则对下次测试造成影响	}	protected void login(String configFile, String username, String password) {		//1、获取SecurityManager工厂，此处使用Ini配置文件初始化SecurityManager		Factory<org.apache.shiro.mgt.SecurityManager> factory =			new IniSecurityManagerFactory(configFile);		//2、得到SecurityManager实例 并绑定给SecurityUtils		org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();		SecurityUtils.setSecurityManager(securityManager);		//3、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）		Subject subject = SecurityUtils.getSubject();		UsernamePasswordToken token = new UsernamePasswordToken(username, password);		try {			subject.login(token);			// 6.判断是否成功登录			assertEquals(true, subject.isAuthenticated());			System.out.println("登录成功！！");			// 7.注销用户			subject.logout();		}  catch (IncorrectCredentialsException e) {			System.out.println("登录密码错误. Password for account " + token.getPrincipal() + " was incorrect.");		} catch (ExcessiveAttemptsException e) {			System.out.println("登录失败次数过多");		} catch (LockedAccountException e) {			System.out.println("帐号已被锁定. The account for username " + token.getPrincipal() + " was locked.");		} catch (DisabledAccountException e) {			System.out.println("帐号已被禁用. The account for username " + token.getPrincipal() + " was disabled.");		} catch (ExpiredCredentialsException e) {			System.out.println("帐号已过期. the account for username " + token.getPrincipal() + "  was expired.");		} catch (UnknownAccountException e) {			System.out.println("帐号不存在. There is no user with username of " + token.getPrincipal());		}  catch (AuthenticationException e) {			e.printStackTrace();		}	}	public Subject subject() {		return SecurityUtils.getSubject();	}}